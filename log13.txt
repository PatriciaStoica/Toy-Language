Id: 1
Execution stack: 
(Ref(int) v1; (int cnt; (new(v1, 1); (newSemaphore(cnt, ReadHeap(v1)); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt)))))))))
Symbol table: 
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 1
Execution stack: 
Ref(int) v1
(int cnt; (new(v1, 1); (newSemaphore(cnt, ReadHeap(v1)); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt))))))))
Symbol table: 
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 1
Execution stack: 
Ref(int) v1
(int cnt; (new(v1, 1); (newSemaphore(cnt, ReadHeap(v1)); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt))))))))
Symbol table: 
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 1
Execution stack: 
(int cnt; (new(v1, 1); (newSemaphore(cnt, ReadHeap(v1)); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt))))))))
Symbol table: 
v1 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 1
Execution stack: 
(int cnt; (new(v1, 1); (newSemaphore(cnt, ReadHeap(v1)); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt))))))))
Symbol table: 
v1 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 1
Execution stack: 
int cnt
(new(v1, 1); (newSemaphore(cnt, ReadHeap(v1)); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt)))))))
Symbol table: 
v1 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 1
Execution stack: 
int cnt
(new(v1, 1); (newSemaphore(cnt, ReadHeap(v1)); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt)))))))
Symbol table: 
v1 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 1
Execution stack: 
(new(v1, 1); (newSemaphore(cnt, ReadHeap(v1)); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt)))))))
Symbol table: 
cnt -> 0
v1 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 1
Execution stack: 
(new(v1, 1); (newSemaphore(cnt, ReadHeap(v1)); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt)))))))
Symbol table: 
cnt -> 0
v1 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 1
Execution stack: 
new(v1, 1)
(newSemaphore(cnt, ReadHeap(v1)); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt))))))
Symbol table: 
cnt -> 0
v1 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 1
Execution stack: 
new(v1, 1)
(newSemaphore(cnt, ReadHeap(v1)); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt))))))
Symbol table: 
cnt -> 0
v1 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 1
Execution stack: 
(newSemaphore(cnt, ReadHeap(v1)); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt))))))
Symbol table: 
cnt -> 0
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:

Id: 1
Execution stack: 
(newSemaphore(cnt, ReadHeap(v1)); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt))))))
Symbol table: 
cnt -> 0
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:

Id: 1
Execution stack: 
newSemaphore(cnt, ReadHeap(v1))
(fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt)))))
Symbol table: 
cnt -> 0
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:

Id: 1
Execution stack: 
newSemaphore(cnt, ReadHeap(v1))
(fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt)))))
Symbol table: 
cnt -> 0
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:

Id: 1
Execution stack: 
(fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt)))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: []

Id: 1
Execution stack: 
(fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt)))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: []

Id: 1
Execution stack: 
fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))
(fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: []

Id: 1
Execution stack: 
fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))
(fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: []

Id: 1
Execution stack: 
(fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: []

Id: 2
Execution stack: 
(acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: []

Id: 1
Execution stack: 
(fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: []

Id: 2
Execution stack: 
(acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: []

Id: 1
Execution stack: 
fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))))
(acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: []

Id: 2
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: []

Id: 1
Execution stack: 
fork((acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))))
(acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: []

Id: 2
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: []

Id: 1
Execution stack: 
(acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 2
Execution stack: 
(WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 3
Execution stack: 
(acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 1
Execution stack: 
(acquireSemaphore(cnt); (print(ReadHeap(v1) - 1); releaseSemaphore(cnt)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 2
Execution stack: 
(WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); releaseSemaphore(cnt)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 3
Execution stack: 
(acquireSemaphore(cnt); (WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 1
Execution stack: 
acquireSemaphore(cnt)
(print(ReadHeap(v1) - 1); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 2
Execution stack: 
WriteHeap(v1, ReadHeap(v1) * 10)
(print(ReadHeap(v1)); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 3
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 1
Execution stack: 
acquireSemaphore(cnt)
(print(ReadHeap(v1) - 1); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 2
Execution stack: 
WriteHeap(v1, ReadHeap(v1) * 10)
(print(ReadHeap(v1)); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 3
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 1
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 1
Execution stack: 
acquireSemaphore(cnt)
(print(ReadHeap(v1) - 1); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 2
Execution stack: 
(print(ReadHeap(v1)); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 3
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 1
Execution stack: 
acquireSemaphore(cnt)
(print(ReadHeap(v1) - 1); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 2
Execution stack: 
(print(ReadHeap(v1)); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 3
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 1
Execution stack: 
acquireSemaphore(cnt)
(print(ReadHeap(v1) - 1); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 2
Execution stack: 
print(ReadHeap(v1))
releaseSemaphore(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 3
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 1
Execution stack: 
acquireSemaphore(cnt)
(print(ReadHeap(v1) - 1); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 2
Execution stack: 
print(ReadHeap(v1))
releaseSemaphore(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 3
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 1
Execution stack: 
acquireSemaphore(cnt)
(print(ReadHeap(v1) - 1); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 2
Execution stack: 
releaseSemaphore(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 3
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 1
Execution stack: 
acquireSemaphore(cnt)
(print(ReadHeap(v1) - 1); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 2
Execution stack: 
releaseSemaphore(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 3
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [2]

Id: 1
Execution stack: 
acquireSemaphore(cnt)
(print(ReadHeap(v1) - 1); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: []

Id: 2
Execution stack: 
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: []

Id: 3
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: []

Id: 1
Execution stack: 
acquireSemaphore(cnt)
(print(ReadHeap(v1) - 1); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: []

Id: 3
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: []

Id: 1
Execution stack: 
(print(ReadHeap(v1) - 1); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [1]

Id: 3
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [1]

Id: 1
Execution stack: 
(print(ReadHeap(v1) - 1); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [1]

Id: 3
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [1]

Id: 1
Execution stack: 
print(ReadHeap(v1) - 1)
releaseSemaphore(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [1]

Id: 3
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [1]

Id: 1
Execution stack: 
print(ReadHeap(v1) - 1)
releaseSemaphore(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [1]

Id: 3
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [1]

Id: 1
Execution stack: 
releaseSemaphore(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [1]

Id: 3
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [1]

Id: 1
Execution stack: 
releaseSemaphore(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [1]

Id: 3
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [1]

Id: 1
Execution stack: 
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: []

Id: 3
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: []

Id: 3
Execution stack: 
acquireSemaphore(cnt)
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: []

Id: 3
Execution stack: 
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [3]

Id: 3
Execution stack: 
(WriteHeap(v1, ReadHeap(v1) * 10); (WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [3]

Id: 3
Execution stack: 
WriteHeap(v1, ReadHeap(v1) * 10)
(WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [3]

Id: 3
Execution stack: 
WriteHeap(v1, ReadHeap(v1) * 10)
(WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 10
Lock Table:

Latch Table:
1 -> 1: [3]

Id: 3
Execution stack: 
(WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 100
Lock Table:

Latch Table:
1 -> 1: [3]

Id: 3
Execution stack: 
(WriteHeap(v1, ReadHeap(v1) * 2); (print(ReadHeap(v1)); releaseSemaphore(cnt)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 100
Lock Table:

Latch Table:
1 -> 1: [3]

Id: 3
Execution stack: 
WriteHeap(v1, ReadHeap(v1) * 2)
(print(ReadHeap(v1)); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 100
Lock Table:

Latch Table:
1 -> 1: [3]

Id: 3
Execution stack: 
WriteHeap(v1, ReadHeap(v1) * 2)
(print(ReadHeap(v1)); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 100
Lock Table:

Latch Table:
1 -> 1: [3]

Id: 3
Execution stack: 
(print(ReadHeap(v1)); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 200
Lock Table:

Latch Table:
1 -> 1: [3]

Id: 3
Execution stack: 
(print(ReadHeap(v1)); releaseSemaphore(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 200
Lock Table:

Latch Table:
1 -> 1: [3]

Id: 3
Execution stack: 
print(ReadHeap(v1))
releaseSemaphore(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 200
Lock Table:

Latch Table:
1 -> 1: [3]

Id: 3
Execution stack: 
print(ReadHeap(v1))
releaseSemaphore(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
File table:
Heap memory:
1 -> 200
Lock Table:

Latch Table:
1 -> 1: [3]

Id: 3
Execution stack: 
releaseSemaphore(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
Output list: 
10
9
200
File table:
Heap memory:
1 -> 200
Lock Table:

Latch Table:
1 -> 1: [3]

